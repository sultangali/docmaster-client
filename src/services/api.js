const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://docmaster.digital/api';

console.log('üîß API Configuration:', {
  VITE_API_URL: import.meta.env.VITE_API_URL,
  API_BASE_URL: API_BASE_URL
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
class ApiService {
  constructor() {
    this.baseURL = API_BASE_URL;
    console.log('üöÄ ApiService initialized with baseURL:', this.baseURL);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
  getToken() {
    return localStorage.getItem('token');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
  getHeaders(includeAuth = true) {
    const headers = {
      'Content-Type': 'application/json',
    };

    if (includeAuth) {
      const token = this.getToken();
      if (token) {
        headers.Authorization = `Bearer ${token}`;
        console.log('üîë Using auth token:', token.substring(0, 20) + '...');
      } else {
        console.warn('‚ö†Ô∏è No auth token found in localStorage');
      }
    }

    return headers;
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      credentials: 'include',
      headers: this.getHeaders(options.auth !== false),
      ...options,
    };

    console.log('üåê Making API request:', {
      url,
      method: config.method || 'GET',
      headers: config.headers
    });

    try {
      const response = await fetch(url, config);
      console.log('üì° Response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      const data = await response.json();
      console.log('üìã Response data:', data);

      if (!response.ok) {
        throw new Error(data.message || `HTTP error! status: ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error('‚ùå API Request Error:', error);
      console.error('Request details:', { url, config });
      throw error;
    }
  }

  // GET –∑–∞–ø—Ä–æ—Å
  async get(endpoint, options = {}) {
    return this.request(endpoint, { method: 'GET', ...options });
  }

  // POST –∑–∞–ø—Ä–æ—Å
  async post(endpoint, data, options = {}) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
      ...options,
    });
  }

  // PUT –∑–∞–ø—Ä–æ—Å
  async put(endpoint, data, options = {}) {
    return this.request(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
      ...options,
    });
  }

  // DELETE –∑–∞–ø—Ä–æ—Å
  async delete(endpoint, options = {}) {
    return this.request(endpoint, { method: 'DELETE', ...options });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const apiService = new ApiService();

// API –º–µ—Ç–æ–¥—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authApi = {
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  login: async (credentials) => {
    return apiService.post('/auth/login', credentials, { auth: false });
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
  getUsers: async () => {
    return apiService.get('/auth/users', { auth: false });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  getCurrentUser: async () => {
    return apiService.get('/auth/me');
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
  refreshToken: async () => {
    return apiService.post('/auth/refresh');
  },
};

// API –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const usersApi = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  getUsers: async (params = {}) => {
    const queryParams = new URLSearchParams(params).toString();
    return apiService.get(`/users?${queryParams}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  getUserById: async (id) => {
    return apiService.get(`/users/${id}`);
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  createUser: async (userData) => {
    return apiService.post('/users', userData);
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUser: async (id, userData) => {
    return apiService.put(`/users/${id}`, userData);
  },

  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  deleteUser: async (id) => {
    return apiService.delete(`/users/${id}`);
  },

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  restoreUser: async (id) => {
    return apiService.post(`/users/${id}/restore`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
  getUsersByRole: async (role) => {
    return apiService.get(`/users/by-role/${role}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
  getDashboardStats: async () => {
    return apiService.get('/users/stats/dashboard');
  },
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export const apiUtils = {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  checkHealth: async () => {
    try {
      return await apiService.get('/health', { auth: false });
    } catch (error) {
      throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ API
  handleApiError: (error) => {
    if (error.message.includes('401')) {
      // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω—É–∂–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      window.location.href = '/login';
      return '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ';
    }

    if (error.message.includes('403')) {
      return '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É';
    }

    if (error.message.includes('404')) {
      return '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }

    if (error.message.includes('500')) {
      return '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    }

    return error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  },
};

export default apiService;

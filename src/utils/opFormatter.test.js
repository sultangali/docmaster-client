/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –û–ü
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
 */

import { 
  splitOPText, 
  formatOPForApplication, 
  createOPDisplayElement 
} from './opFormatter.jsx';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –û–ü
const testOPs = [
  '¬´7M06101¬ª - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
  '¬´7M01503¬ª - –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è',
  '¬´7M06104¬ª - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
  '¬´8D01103¬ª - –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
  '¬´7M06101¬ª - –ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∂“Ø–π–µ–ª–µ—Ä –∂”ô–Ω–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä',
  '¬´7M01503¬ª - –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∂”ô–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è',
  '¬´7M06104¬ª - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞–ª—ã“õ –∂”ô–Ω–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–ª—ñ–∫ –º–æ–¥–µ–ª—å–¥–µ—É',
  '¬´8D01103¬ª - –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∂”ô–Ω–µ –µ—Å–µ–ø—Ç–µ—É—ñ—à —Ç–µ—Ö–Ω–∏–∫–∞'
];

console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –û–ü –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ ===');

testOPs.forEach((opText, index) => {
  console.log(`\n${index + 1}. –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "${opText}"`);
  
  const result = splitOPText(opText);
  console.log(`   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "${result.firstLine}"`);
  console.log(`   –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: "${result.secondLine}"`);
  console.log(`   –ù—É–∂–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å: ${result.secondLine.length > 0 ? '–î–∞' : '–ù–µ—Ç'}`);
});

console.log('\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π ===');

testOPs.forEach((opText, index) => {
  console.log(`\n${index + 1}. –û–ü: "${opText}"`);
  
  const formatted = formatOPForApplication(opText, '–†—É—Å—Å–∫–∏–π');
  console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "${formatted.firstLine}"`);
  console.log(`   - –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: "${formatted.secondLine}"`);
  console.log(`   - –ï—Å—Ç—å –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: ${formatted.hasSecondLine}`);
  console.log(`   - –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: "${formatted.fullText}"`);
});

console.log('\n=== –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ ===');

const russianOP = '¬´7M06101¬ª - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
const kazakhOP = '¬´7M06101¬ª - –ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∂“Ø–π–µ–ª–µ—Ä –∂”ô–Ω–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä';

console.log('\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫:');
const russianFormatted = formatOPForApplication(russianOP, '–†—É—Å—Å–∫–∏–π');
console.log(`–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "${russianFormatted.firstLine}"`);
console.log(`–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: "${russianFormatted.secondLine}"`);

console.log('\n–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫:');
const kazakhFormatted = formatOPForApplication(kazakhOP, '“ö–∞–∑–∞“õ—à–∞');
console.log(`–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "${kazakhFormatted.firstLine}"`);
console.log(`–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: "${kazakhFormatted.secondLine}"`);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  window.testOPFormatter = {
    splitOPText,
    formatOPForApplication,
    createOPDisplayElement,
    testOPs,
    
    // –ü–æ–ª–µ–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    testAllOPs: () => {
      testOPs.forEach((op, i) => {
        console.log(`${i + 1}. ${op}`);
        const result = formatOPForApplication(op, '–†—É—Å—Å–∫–∏–π');
        console.log(`   ‚Üí "${result.firstLine}"`);
        if (result.hasSecondLine) {
          console.log(`     "${result.secondLine}"`);
        }
        console.log('');
      });
    },
    
    testSpecificOP: (opText, language = '–†—É—Å—Å–∫–∏–π') => {
      console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: "${opText}" (${language})`);
      const result = formatOPForApplication(opText, language);
      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç:`);
      console.log(`"${result.firstLine}"`);
      if (result.hasSecondLine) {
        console.log(`"${result.secondLine}"`);
      }
      return result;
    }
  };
  
  console.log('\nüöÄ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
  console.log('window.testOPFormatter.testAllOPs()');
  console.log('window.testOPFormatter.testSpecificOP("–≤–∞—à —Ç–µ–∫—Å—Ç –û–ü")');
}
